package com.example.hyperionapp;

import android.app.AlertDialog;
import android.content.Context;
import android.content.DialogInterface;
import android.content.Intent;
import android.os.Bundle;

import com.google.android.material.tabs.TabLayout;

import androidx.annotation.Nullable;
import androidx.lifecycle.LifecycleObserver;
import androidx.lifecycle.ViewModelProviders;
import androidx.viewpager.widget.ViewPager;
import androidx.appcompat.app.AppCompatActivity;

import android.util.Log;
import android.view.Menu;
import android.view.MenuInflater;
import android.view.MenuItem;

import com.example.hyperionapp.ui.main.SectionsPagerAdapter;
import com.google.firebase.Timestamp;
import com.google.firebase.auth.FirebaseAuth;
import com.google.firebase.auth.FirebaseUser;
import com.google.firebase.firestore.DocumentReference;
import com.google.firebase.firestore.DocumentSnapshot;
import com.google.firebase.firestore.FirebaseFirestore;
import com.google.firebase.firestore.FirebaseFirestoreException;
import com.google.gson.Gson;
import org.json.JSONObject;
import java.util.Date;
import java.util.Map;

public class MainActivity extends AppCompatActivity implements LifecycleObserver {
    /* Class to handle main UI logic, loading the user data and setting up the viewModel */

    // Declare and instantiate class constants
    private FirebaseUser user = FirebaseAuth.getInstance().getCurrentUser();
    private FirebaseAuth mAuth = FirebaseAuth.getInstance();
    private FirebaseFirestore db = FirebaseFirestore.getInstance();
    private String user_id = user.getUid();
    final String SYMMETRIC_ALIAS = "hyperion_symmetric_" + user_id;
    final String DATA_FILENAME = user_id + "_hyperion.enc";
    private EncryptionService encryption = new EncryptionService();
    Gson gson = new Gson();
    LoginActivity login = new LoginActivity();

    // Declare viewModel (used to share data between Fragments)
    private PatientDetails patientModel;


    // TODO: Update the data (apart from session_shared) from the status FirebaseFirestore
    @Override
    protected void onCreate(Bundle savedInstanceState)
    {
        super.onCreate(savedInstanceState);
        // Check if user is logged in
        isAuthenticated(getApplicationContext(), user, true);
        // Grab the incoming intent in order to display the right fragment
        Intent intent = getIntent();
        // viewpager_position tells the Activity which Fragment to display based on the order
        // in the SectionPagerAdapter's getItem method
        // 2 =  CheckinFragment
        int view_page = intent.getIntExtra("viewpager_position", 2);
        // Render the MainActivity's layout which houses the viewpager layout
        setContentView(R.layout.activity_main);

        // Below code generated by choosing "Tabbed Activity" when creating the project initially
        // SectionPageAdapter, ViewPager and TabLayout handling displaying the Fragments, moving
        // from one Fragment to the other and displaying the Tabbed Layout
        SectionsPagerAdapter sectionsPagerAdapter = new SectionsPagerAdapter(this,
                getSupportFragmentManager());
        ViewPager viewPager = findViewById(R.id.view_pager);
        viewPager.setAdapter(sectionsPagerAdapter);
        viewPager.setCurrentItem(view_page);
        TabLayout tabs = findViewById(R.id.tabs);
        tabs.setupWithViewPager(viewPager);

        // Instantiate the viewModel using the PatientDetails class
        // This is used to share the same data across all fragments of the viewpager
        patientModel = ViewModelProviders.of(this).get(PatientDetails.class);
        // Read the user's saved encrypted file contents from the App storage
        String encrypted_data = encryption.basicRead(MainActivity.this, DATA_FILENAME);
        // Decrypt the data retrieved from the file using the Symmetric key from the Android
        // Keystore
        String json_data = encryption.decryptSymmetric(encrypted_data, SYMMETRIC_ALIAS);

        // @troubleshooting
        //json_data = null;

        // Declare a new PatientDetails instance
        PatientDetails p;
        // Check if the decrypted data is null (this happens if the data is empty/
        // or there was an error in decrypting the data
        if(json_data != null) {
            // Reference: https://mkyong.com/java/how-do-convert-java-object-to-from-json-format-gson-api/
            // Use the GSON class to parse the decrypted data from JSON String
            // to a new PatientDetails instance
            p = gson.fromJson(json_data, PatientDetails.class);
        } else {
            // Otherwise instantiate an empty PatientDetails instance
            p = new PatientDetails();
        }

        // Use the PatientDetails' class' methods to load the decryted and converted data
        // to the viewModel
        patientModel.setPersonalDetails(
                p.getName(), p.getEmail(), p.getDateOfBirth(), p.getAddress(), p.getAddress2(),
                p.getCity(),p.getPostCode(),p.getPPSNumber(),p.getInsurance(), p.getCurrentSessionID()
        );
        patientModel.setMedicalDetails(
                p.getBloodType(), p.getAllergies(), p.getTuberculosis(), p.getDiabetes(),
                p.getHeartCondition(), p.getGlaucoma(), p.getEpilepsy(), p.getDrugAlcoholAbuse(),
                p.getSmoker(), p.getCancer(), p.getOtherConditions(), p.getMedications(),
                p.getHeight(), p.getWeight(), p.getRegisteredGP()
        );
        patientModel.setPatientSessions(p.patientSessions);
        patientModel.setLatestSnapshot(p.getLatestSnapshot());
        if(p.getCurrentSessionID() != "") {
           updateFromSnapshot(db, p.getCurrentSessionID());
        }
    }

    // Reference: https://developer.android.com/guide/topics/ui/menus#options-menu
    @Override
    public boolean onCreateOptionsMenu(Menu menu) {
        /* Method to display an options menu
         * @param Menu menu The menu that should be displayed
         * @return boolean
         */

        // Render options menu
        MenuInflater inflater = getMenuInflater();
        inflater.inflate(R.menu.settings_menu, menu);
        return true;
    }

    // Reference: https://developer.android.com/guide/topics/ui/menus#RespondingOptionsMenu
    @Override
        public boolean onOptionsItemSelected(MenuItem item) {
        /* Method to handle the functionality of the selected options menu item
         * @param MenuItem item The selected options menu item
         * @return boolean
         */

        // Switch conditional statement to handle item selection
        switch (item.getItemId()) {
            // If the option "Clear Data" is selected
            case R.id.cleanse_data:
                // Display a confirmation dialog first to make sure
                // the user wants to delete the data
                // Reference: https://stackoverflow.com/a/5127506
                new AlertDialog.Builder(this)
                        .setTitle("Clear Data")
                        .setMessage("Do you really want to clear all data?")
                        .setIcon(android.R.drawable.ic_dialog_alert)
                        .setPositiveButton(android.R.string.yes, (DialogInterface dialog, int whichButton) -> {
                                // When the dialog is confirmed
                                // Create a new empty PatientDetails instance
                                // and save it in the local storage file
                                PatientDetails clean_patient = new PatientDetails();
                                encryption.saveData(clean_patient, SYMMETRIC_ALIAS,
                                        getApplicationContext(), DATA_FILENAME);
                                // Close the menu and restart the activity
                                finish();
                                startActivity(getIntent());
                            })
                        .setNegativeButton(android.R.string.no, null).show();
                return true;
            case R.id.change_code:
                // If the option "New Verification Code" is selected
                // Redirect to the CreateCodeActivity
                Intent codeIntent = new Intent(this, CreateCodeActivity.class);
                startActivity(codeIntent);
                return true;
            case R.id.logout:
                // If the option "Logout" is selected
                // Logout
                mAuth.signOut();
                // And redirect to the LoginActivity
                Intent loginActivity = new Intent(getApplicationContext(), LoginActivity.class);
                startActivity(loginActivity);;
                return true;
            default:
                return super.onOptionsItemSelected(item);
        }
    }

    public void updateFromSnapshot(FirebaseFirestore db, String sessionID){
        // Reference: https://firebase.google.com/docs/firestore/query-data/listen
        // Add a snapshotListener to the document with the specified sessionID
        final DocumentReference document = db.collection("checkins").document(sessionID);
            document.addSnapshotListener((@Nullable
        DocumentSnapshot snapshot,
        @Nullable
        FirebaseFirestoreException e) -> {
            // If there are any errors
            if (e != null) {
                return;
            }
                Log.d("SNAPSHOT UPDATE", "Yes");
            // If the snapshot is not null and the snapshot exists
            if (snapshot != null && snapshot.exists()) {
                // Save the snapshot in a variable
                Map<String, Object> newSnapshot = snapshot.getData();
                // Reference: https://stackoverflow.com/a/56259511
                // The timestamp returned in snapshot cannot be parsed parsed properly
                // It has to be manually converted and set
                Timestamp session_timestamp = (Timestamp) snapshot.getData().get("session_checkin");
                Date session_checkin = session_timestamp.toDate();
                // Convert the snapshot to a JSON Object
                JSONObject jsonSnapshot = new JSONObject(newSnapshot);
                // Retrieve the latestSnapshot from the viewModel
                Checkin snapShotPayload = patientModel.getLatestSnapshot();
                // If there was any update in the snapshot
                if(snapShotPayload != newSnapshot){
                    // Reference: https://mkyong.com/java/how-do-convert-java-object-to-from-json-format-gson-api/
                    // Parse the new snapshot from JSON to Checkin with GSON.fromJson
                    Checkin c = gson.fromJson(jsonSnapshot.toString(), Checkin.class);
                    // Manually setting session_checkin
                    c.setSession_checkin(session_checkin);
                    // Update latestSnapshot in the viewModel
                    patientModel.setLatestSnapshot(c);

                    // Update the viewModel with the new information from the snapshot and
                    // save it to the encrypted local file
                    Checkin news =  patientModel.updateSessionById(c);
                    // If the session ended
                    if(c.getSession_shared() == 3){
                        // Clear currentSessionID and latestSnapshot
                        // TODO: remove the registration
                        Log.d("SNAPSHOT UPDATE", c.getSession_shared()+"");
                        patientModel.setCurrentSessionID("");
                        patientModel.setLatestSnapshot(null);
                        Intent mainIntent = new Intent(MainActivity.this, MainActivity.class);
                        startActivity(mainIntent);
                    }
                    encryption.saveData(patientModel, SYMMETRIC_ALIAS, MainActivity.this, DATA_FILENAME);
                }
            } else {
                // If the snapshot is null or does not exist write error to log
                Log.e("SNAPSHOT NULL", "Empty Snapshot received");
            }
        });
    }


    public void isAuthenticated(Context context, FirebaseUser user, boolean redirect){
        /* Method to check if user is authenticated
         * @param Context context The context (activity the method is called from)
         * @param FirebaseUser user The FirebaseUser which should be validated
         * @param boolean redirect True if the user should be redirected to MainActivity after success
         * @return boolean
         */
        RegisterActivity reg = new RegisterActivity();
        // Reference: https://firebase.google.com/docs/auth/android/manage-users#get_the_currently_signed-in_user
        // If the user is authenticated
        if(user != null){
            // Reference: https://firebase.google.com/docs/auth/android/manage-users#get_a_users_profile
            // If the user's email is verified
            if(!user.isEmailVerified()){
                // If the email is not verified logout and redirect to the LoginActivity
                mAuth.signOut();
                Intent loginActivity = new Intent(context, LoginActivity.class);
                startActivity(loginActivity);
                // Show error message
                reg.showTopToast(MainActivity.this,
                        getString(R.string.error_email_not_verified));
            }
        } else {
            if(redirect) {
                // If the user is not authenticated redirect to the LoginActivity
                Intent loginActivity = new Intent(context, LoginActivity.class);
                startActivity(loginActivity);
                // Show error message
                reg.showTopToast(MainActivity.this,
                        getString(R.string.error_login_failed));
            }
        }
    }
}